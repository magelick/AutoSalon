# Generated by Django 4.2.4 on 2023-10-08 10:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('transport', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdjustmentsSeatsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustments_seats_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'регулировка сидения',
                'verbose_name_plural': 'регулировка сидений',
            },
        ),
        migrations.CreateModel(
            name='AnnouncementCarEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'комплектация',
                'verbose_name_plural': 'комплектации',
            },
        ),
        migrations.CreateModel(
            name='BlindSpotMonitoringSystemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blind_spot_monitoring_system_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'система контроля слепых зон',
                'verbose_name_plural': 'системы контроля слепых зон',
            },
        ),
        migrations.CreateModel(
            name='BluetoothType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bluetooth_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'bluetooth-система',
                'verbose_name_plural': 'bluetooth-системы',
            },
        ),
        migrations.CreateModel(
            name='BodyKitType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_kit_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'обвес',
                'verbose_name_plural': 'обвесы',
            },
        ),
        migrations.CreateModel(
            name='ClimateControlType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('climate_control_name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'климат-контроль',
                'verbose_name_plural': 'климат-контроли',
            },
        ),
        migrations.CreateModel(
            name='CollisionAvoidanceSystemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collision_avoidance_system_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'система избежания столкновений',
                'verbose_name_plural': 'системы избежания столкновений',
            },
        ),
        migrations.CreateModel(
            name='ColorSalonCarType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color_salon_car_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'цвет салона',
                'verbose_name_plural': 'цвета салона',
            },
        ),
        migrations.CreateModel(
            name='HeadlightsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('headlights_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'тип фар',
                'verbose_name_plural': 'типы фар',
            },
        ),
        migrations.CreateModel(
            name='HeatedSeatsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heated_seats_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'подогрев сидения',
                'verbose_name_plural': 'подогрев сидений',
            },
        ),
        migrations.CreateModel(
            name='LaneDepartureWarningSystemType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lane_departure_warning_system_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'система предупреждения о сходе с полосы',
                'verbose_name_plural': 'системы предупреждения о сходе с полосы',
            },
        ),
        migrations.CreateModel(
            name='LightSensorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('light_sensor_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'датчик света',
                'verbose_name_plural': 'датчики света',
            },
        ),
        migrations.CreateModel(
            name='ParkingSensorsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parking_sensors_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'тип фар',
                'verbose_name_plural': 'типы фар',
            },
        ),
        migrations.CreateModel(
            name='RaisSensorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rain_sensor_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'датчик дождя',
                'verbose_name_plural': 'датчики дождя',
            },
        ),
        migrations.CreateModel(
            name='RoofCarType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roof_car_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'тип крышы',
                'verbose_name_plural': 'типы крыш',
            },
        ),
        migrations.CreateModel(
            name='SalonCarType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salon_car_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'тип салоны',
                'verbose_name_plural': 'типы салона',
            },
        ),
        migrations.CreateModel(
            name='StartStopType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_stop_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'система start-stop',
                'verbose_name_plural': 'системы start-stop',
            },
        ),
        migrations.CreateModel(
            name='VentilationSeatsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ventilation_seats_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'подогрев сидения',
                'verbose_name_plural': 'подогрев сидений',
            },
        ),
        migrations.AlterModelOptions(
            name='announcementcarimage',
            options={'verbose_name': 'фотографии автомобиля', 'verbose_name_plural': 'фотографии автомобилей'},
        ),
        migrations.AlterModelOptions(
            name='transmissiontype',
            options={'verbose_name': 'тип коробки передач', 'verbose_name_plural': 'типы коробок передач'},
        ),
        migrations.RemoveField(
            model_name='announcementcar',
            name='equipment',
        ),
        migrations.AlterField(
            model_name='announcementcar',
            name='slug',
            field=models.SlugField(max_length=200, unique=True),
        ),
        migrations.AlterField(
            model_name='announcementcarimage',
            name='announcement_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='images', to='transport.announcementcar'),
        ),
        migrations.AddConstraint(
            model_name='ventilationseatstype',
            constraint=models.CheckConstraint(check=models.Q(('ventilation_seats_name__lte', 64)), name='ventilation_seats_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='ventilationseatstype',
            constraint=models.CheckConstraint(check=models.Q(('ventilation_seats_name__gte', 0)), name='ventilation_seats_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='startstoptype',
            constraint=models.CheckConstraint(check=models.Q(('start_stop_name__lte', 64)), name='start_stop_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='startstoptype',
            constraint=models.CheckConstraint(check=models.Q(('start_stop_name__gte', 0)), name='start_stop_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='saloncartype',
            constraint=models.CheckConstraint(check=models.Q(('salon_car_name__lte', 64)), name='salon_car_name__lte'),
        ),
        migrations.AddConstraint(
            model_name='saloncartype',
            constraint=models.CheckConstraint(check=models.Q(('salon_car_name__gte', 0)), name='salon_car_name__gte'),
        ),
        migrations.AddConstraint(
            model_name='roofcartype',
            constraint=models.CheckConstraint(check=models.Q(('roof_car_name__lte', 64)), name='roof_car_name__lte'),
        ),
        migrations.AddConstraint(
            model_name='roofcartype',
            constraint=models.CheckConstraint(check=models.Q(('roof_car_name__gte', 0)), name='roof_car_name__gte'),
        ),
        migrations.AddConstraint(
            model_name='raissensortype',
            constraint=models.CheckConstraint(check=models.Q(('rain_sensor_name__lte', 64)), name='rain_sensor_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='raissensortype',
            constraint=models.CheckConstraint(check=models.Q(('rain_sensor_name__gte', 0)), name='rain_sensor_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='parkingsensorstype',
            constraint=models.CheckConstraint(check=models.Q(('parking_sensors_name__lte', 64)), name='parking_sensors_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='parkingsensorstype',
            constraint=models.CheckConstraint(check=models.Q(('parking_sensors_name__gte', 0)), name='parking_sensors_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='lightsensortype',
            constraint=models.CheckConstraint(check=models.Q(('light_sensor_name__lte', 64)), name='light_sensor_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='lightsensortype',
            constraint=models.CheckConstraint(check=models.Q(('light_sensor_name__gte', 0)), name='light_sensor_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='lanedeparturewarningsystemtype',
            constraint=models.CheckConstraint(check=models.Q(('lane_departure_warning_system_name__lte', 64)), name='lane_departure_warning_system_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='lanedeparturewarningsystemtype',
            constraint=models.CheckConstraint(check=models.Q(('lane_departure_warning_system_name__gte', 0)), name='lane_departure_warning_system_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='heatedseatstype',
            constraint=models.CheckConstraint(check=models.Q(('heated_seats_name__lte', 64)), name='heated_seats_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='heatedseatstype',
            constraint=models.CheckConstraint(check=models.Q(('heated_seats_name__gte', 0)), name='heated_seats_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='headlightstype',
            constraint=models.CheckConstraint(check=models.Q(('headlights_name__lte', 64)), name='headlights_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='headlightstype',
            constraint=models.CheckConstraint(check=models.Q(('headlights_name__gte', 0)), name='headlights_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='colorsaloncartype',
            constraint=models.CheckConstraint(check=models.Q(('color_salon_car_name__lte', 64)), name='color_salon_car_name__lte'),
        ),
        migrations.AddConstraint(
            model_name='colorsaloncartype',
            constraint=models.CheckConstraint(check=models.Q(('color_salon_car_name__gte', 0)), name='color_salon_car_name__gte'),
        ),
        migrations.AddConstraint(
            model_name='collisionavoidancesystemtype',
            constraint=models.CheckConstraint(check=models.Q(('collision_avoidance_system_name__lte', 64)), name='collision_avoidance_system_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='collisionavoidancesystemtype',
            constraint=models.CheckConstraint(check=models.Q(('collision_avoidance_system_name__gte', 0)), name='collision_avoidance_system_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='climatecontroltype',
            constraint=models.CheckConstraint(check=models.Q(('climate_control_name__length__lte', 64)), name='climate_control_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='climatecontroltype',
            constraint=models.CheckConstraint(check=models.Q(('climate_control_name__gte', 0)), name='climate_control_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='bodykittype',
            constraint=models.CheckConstraint(check=models.Q(('body_kit_name__lte', 64)), name='body_kit_name__lte'),
        ),
        migrations.AddConstraint(
            model_name='bodykittype',
            constraint=models.CheckConstraint(check=models.Q(('body_kit_name__gte', 0)), name='body_kit_name__gte'),
        ),
        migrations.AddConstraint(
            model_name='bluetoothtype',
            constraint=models.CheckConstraint(check=models.Q(('bluetooth_name__lte', 64)), name='bluetooth_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='bluetoothtype',
            constraint=models.CheckConstraint(check=models.Q(('bluetooth_name__gte', 0)), name='bluetooth_name__length__gte'),
        ),
        migrations.AddConstraint(
            model_name='blindspotmonitoringsystemtype',
            constraint=models.CheckConstraint(check=models.Q(('blind_spot_monitoring_system_name__lte', 64)), name='blind_spot_monitoring_system_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='blindspotmonitoringsystemtype',
            constraint=models.CheckConstraint(check=models.Q(('blind_spot_monitoring_system_name__gte', 0)), name='blind_spot_monitoring_system_name__length__gte'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='adjustments_seats_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.adjustmentsseatstype', verbose_name='регулировка сидений'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='blind_spot_monitoring_system_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.blindspotmonitoringsystemtype', verbose_name='система контроля слепых зон'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='bluetooth_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.bluetoothtype', verbose_name='bluetooth-система'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='body_kit_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.bodykittype', verbose_name='обвес'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='climate_control_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.climatecontroltype', verbose_name='климат-контроль'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='collision_avoidance_system_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.collisionavoidancesystemtype', verbose_name='система избежания столкновений'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='color_salon_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.colorsaloncartype', verbose_name='цвет салона'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='equipment_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='equipment', to='transport.announcementcar', verbose_name='объявление'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='headlights_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.headlightstype', verbose_name='тип фар'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='heated_seats_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.heatedseatstype', verbose_name='подогрев сидений'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='lane_departure_warning_system_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.lanedeparturewarningsystemtype', verbose_name='система предупреждения о сходе с полосы'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='light_sensor_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.lightsensortype', verbose_name='датчик света'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='parking_sensors_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.parkingsensorstype', verbose_name='датчики парковки'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='rain_sensor_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.raissensortype', verbose_name='датчик дождя'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='roof_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.roofcartype', verbose_name='тип крышы'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='salon_car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='transport.saloncartype', verbose_name='тип салона'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='start_stop_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.startstoptype', verbose_name='start-stop система'),
        ),
        migrations.AddField(
            model_name='announcementcarequipment',
            name='ventilation_seats_car',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='transport.ventilationseatstype', verbose_name='вентиляция сидений'),
        ),
        migrations.AddConstraint(
            model_name='adjustmentsseatstype',
            constraint=models.CheckConstraint(check=models.Q(('adjustments_seats_name__lte', 64)), name='adjustments_seats_name__length__lte'),
        ),
        migrations.AddConstraint(
            model_name='adjustmentsseatstype',
            constraint=models.CheckConstraint(check=models.Q(('adjustments_seats_name__gte', 0)), name='adjustments_seats_name__length__gte'),
        ),
    ]
